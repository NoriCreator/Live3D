#pragma kernel CSMain

RWStructuredBuffer<float4x4> Result;
StructuredBuffer<float4> BasePosition;

int instanceCount;
float _Time;
float _SwingFrequency;
float _SwingOffset;
float _SeatPitchX;
float _SeatPitchY;

uint seed;

float RandBetween(float min, float max)
{
    seed += 1u; // インクリメントすることで使用するたびに異なる乱数を出力
    return min + frac(sin(seed * 0.123456789) * 43758.5453) * (max - min);
}

// パーリンノイズ
float2 random(float2 st){
    st = float2( dot(st,float2(127.1,311.7)),
                    dot(st,float2(269.5,183.3)) );
    return -1.0 + 2.0*frac(sin(st)*43758.5453123);
}

float perlinNoise(float2 st) 
{
    float2 p = floor(st);
    float2 f = frac(st);
    float2 u = f*f*(3.0-2.0*f);

    float v00 = random(p+float2(0,0));
    float v10 = random(p+float2(1,0));
    float v01 = random(p+float2(0,1));
    float v11 = random(p+float2(1,1));

    return lerp( lerp( dot( v00, f - float2(0,0) ), dot( v10, f - float2(1,0) ), u.x ),
                    lerp( dot( v01, f - float2(0,1) ), dot( v11, f - float2(1,1) ), u.x ), 
                    u.y)+0.5f;
}

[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // 余分なスレッドの処理を無効化
    uint index = id.x;
    if (index >= instanceCount) return;

    float4 base = BasePosition[index];
    float3 pos = base.xyz;

    // 疑似ランダム値（インスタンスIDベース）
    seed = index * 123u + 456u;
    float r1 = RandBetween(-1000, 1000);

    float phase = 6.2831853 * _SwingFrequency * _Time;
    phase += perlinNoise(float2(r1, _Time * 0.27));

    // origin
    float3 origin = pos;
    origin.x += RandBetween(-2, 2) * _SeatPitchX;
    origin.z += RandBetween(-2, 2) * _SeatPitchY;
    origin.y += RandBetween(-0.2, 0.2);

    // angle: スイング角度
    float angle = cos(phase);
    float angleUnSmooth = smoothstep(-1, 1, angle) * 2 - 1;
    angle = lerp(angle, angleUnSmooth, RandBetween(0, 1));
    angle *= RandBetween(0.3, 1.0);

    // axis: 揺れ方向
    float dx = perlinNoise(float2(RandBetween(-1000, 1000), _Time * 0.23 + 100));
    float3 axis = normalize(float3(dx, 0, 1));

    // offset: 棒の長さ分
    float offset = _SwingOffset * lerp(0.75, 1.25, frac(seed * 0.414));

    // 平行移動
    float4x4 m1 = float4x4(1, 0, 0, origin.x,
                            0, 1, 0, origin.y,
                            0, 0, 1, origin.z,
                            0, 0, 0, 1);

    // 回転
    float s = sin(angle);
    float c = cos(angle);
    float t = 1 - c;
    float3 a = axis;

    float4x4 m2 = float4x4(
        t*a.x*a.x + c,      t*a.x*a.y - s*a.z,   t*a.x*a.z + s*a.y, 0,
        t*a.x*a.y + s*a.z,  t*a.y*a.y + c,       t*a.y*a.z - s*a.x, 0,
        t*a.x*a.z - s*a.y,  t*a.y*a.z + s*a.x,   t*a.z*a.z + c,     0,
        0,                  0,                   0,                 1
    );

    // 平行移動
    float4x4 m3 = float4x4(1,0,0,0,
                           0,1,0,offset,
                           0,0,1,0,
                           0,0,0,1);

    Result[index] = mul(mul(m1, m2), m3);
}
